{"version":3,"sources":["../src/module/ScriptCache.ts"],"names":[],"mappings":"AAGA,eAAO,MAAM,WAAW,uBA+Fd,CAAC;AAEX,eAAe,WAAW,CAAC","file":"ScriptCache.d.ts","sourcesContent":["let counter = 0;\nconst scriptMap = new Map();\n\nexport const ScriptCache = (function (global) {\n  return (scripts: any) => {\n    const Cache: any = {\n      _onLoad: function (key: string) {\n        return (cb: any) => {\n          const stored = scriptMap.get(key);\n          if (stored) {\n            stored.promise.then(() => {\n              stored.error ? cb(stored.error) : cb(null, stored);\n            });\n          } else {\n            // TODO:\n          }\n        };\n      },\n\n      _scriptTag: (key: string, src: any) => {\n        if (!scriptMap.has(key)) {\n          const tag: any = document.createElement(\"script\");\n          const promise = new Promise((resolve, reject) => {\n            const body = document.getElementsByTagName(\"body\")[0];\n\n            tag.type = \"text/javascript\";\n            tag.async = false; // Load in order\n\n            const cbName = `loaderCB${counter++}${Date.now()}`;\n            const cleanup = (): void => {\n              const gl = global as any;\n              if (gl[cbName] && typeof gl[cbName] === \"function\") {\n                gl[cbName] = null;\n              }\n            };\n\n            const handleResult = (state: any) => {\n              return (evt: any) => {\n                const stored = scriptMap.get(key);\n                if (state === \"loaded\") {\n                  stored.resolved = true;\n                  resolve(src);\n                  // stored.handlers.forEach(h => h.call(null, stored))\n                  // stored.handlers = []\n                } else if (state === \"error\") {\n                  stored.errored = true;\n                  // stored.handlers.forEach(h => h.call(null, stored))\n                  // stored.handlers = [];\n                  reject(evt);\n                }\n\n                cleanup();\n              };\n            };\n\n            tag.onload = handleResult(\"loaded\");\n            tag.onerror = handleResult(\"error\");\n            tag.onreadystatechange = () => {\n              handleResult(tag.readyState);\n            };\n\n            // Pick off callback, if there is one\n            if (src.match(/callback=CALLBACK_NAME/)) {\n              src = src.replace(/(callback=)[^&]+/, `$1${cbName}`);\n              const w = window as any;\n              w[cbName] = tag.onload;\n            } else {\n              tag.addEventListener(\"load\", tag.onload);\n            }\n            tag.addEventListener(\"error\", tag.onerror);\n\n            tag.src = src;\n            body.appendChild(tag);\n            return tag;\n          });\n          const initialState = {\n            loaded: false,\n            error: false,\n            promise: promise,\n            tag,\n          };\n          scriptMap.set(key, initialState);\n        }\n        return scriptMap.get(key);\n      },\n    };\n\n    Object.keys(scripts).forEach(function (key) {\n      const script = scripts[key];\n      const C = Cache;\n      C[key] = {\n        tag: C._scriptTag(key, script),\n        onLoad: C._onLoad(key),\n      };\n    });\n\n    return Cache;\n  };\n})(window);\n\nexport default ScriptCache;\n"]}