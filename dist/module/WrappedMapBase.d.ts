/// <reference types="googlemaps" />
import React from "react";
import MarkerClusterer, { MarkerClustererOptions } from "@google/markerclustererplus";
export declare type ExportedFunctions = {
    getBoundsLiteral: () => LatLngBoundsLiteral | undefined;
    setCenter: (lat_lng: LatLngLiteral | LatLng) => Promise<void>;
    toPixel: (lat_lng_pixel: LatLng | LatLngLiteral) => [number, number];
    setZoom: (zoom_level: number) => Promise<void>;
    setPolyline: (id: string | number, options: PolylineOptionsSet) => Promise<WrappedPolyline>;
    setPolygon: (id: string | number, options: PolygonOptionsSet) => Promise<WrappedPolygon>;
    unsetPolyline: (id: string | number) => Promise<boolean>;
    unsetPolygon: (id: string | number) => Promise<boolean>;
    unsetMarker: (id: string | number) => Promise<boolean>;
    clearPolylines: () => Promise<boolean[]>;
    clearPolygons: () => Promise<boolean[]>;
    clearFeatureCollections: (map_objects: MapObjects, feature_layer: google.maps.Data, feature_layers: google.maps.Data[]) => void;
    setMarker: (id: string | number, options: MarkerOptionsSet) => Promise<WrappedMarker>;
    clearMarkers: () => Promise<boolean[]>;
    setGeoJSONCollection: (collection: GeoJSONFeatureCollection, options: FeatureOptionsSet) => Promise<{
        layer: google.maps.Data;
        features: WrappedFeature[];
    }>;
    setGeoJSONFeature: (feature: GeoJSONFeature, options: FeatureOptionsSet) => Promise<WrappedFeature>;
    zoomToObject: (item: WrappedMarker | WrappedPolygon | WrappedPolyline | WrappedFeature) => void;
    panToObject: (item: WrappedMarker | WrappedPolygon | WrappedPolyline | WrappedFeature) => void;
    setDrawingMode: (type: "polyline" | "polygon", opts: PolylineOptions | PolygonOptions, cb: DrawingCB) => void;
    cancelDrawingMode: (cancel_drawing: boolean, debug_src?: string) => void;
    setCuttingMode: (polyline_id: string | number, cb?: () => any) => void;
    cuttingPositionUpdate: (mouse_event: google.maps.MouseEvent) => void;
    cuttingClick: (mouse_event: google.maps.MouseEvent) => void;
    completeCuttingMode: () => void;
    cancelCuttingMode: () => void;
    registerDragStartCB: (cb: () => void) => number;
    unregisterDragStartCB: (cb: () => void) => void;
    registerDragEndCB: (cb: () => void) => number;
    unregisterDragEndCB: (cb: () => void) => void;
    getClusterers: () => Promise<MarkerClusterer[]>;
    setClusterer: (clusterer_options: MarkerClustererOptions) => Promise<MarkerClusterer>;
    unsetClusterer: (clusterer: MarkerClusterer) => void;
    createClustererStyle: typeof MarkerClusterer.withDefaultStyle;
};
export interface MapBaseProps {
    initializedCB?: (map: google.maps.Map, funcs: ExportedFunctions) => void;
    googleapi_maps_uri: string;
    id?: string;
    default_center: LatLngLiteral;
    default_zoom: number;
    default_options?: object;
    onCenterChanged?: () => void;
    onBoundsChanged?: () => void;
    onClick?: (e: any) => void;
    onDoubleClick?: (e: any) => void;
    onDrag?: () => void;
    onDragEnd?: () => void;
    onDragStart?: () => void;
    onHeadingChanged?: () => void;
    onIdle?: () => void;
    onMapTypeIdChanged?: () => void;
    onMouseMove?: (e: any) => void;
    onMouseOut?: (e: any) => void;
    onMouseOver?: (e: any) => void;
    onProjectionChanged?: () => void;
    onResize?: () => void;
    onRightClick?: (e: any) => void;
    onTilesLoaded?: () => void;
    onTiltChanged?: () => void;
    onZoomChanged?: () => void;
    styles?: object;
}
export declare const WrappedMapBase: React.FunctionComponent<MapBaseProps>;
export default WrappedMapBase;
