{"version":3,"sources":["../src/module/external_helpers.ts"],"names":[],"mappings":"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","file":"external_helpers.js","sourcesContent":["import proj4 from 'proj4';\nimport { LatLngLiteral } from '.';\n\n\ntype Projection = \"GMAPS\" | \"RT90\" | \"SWEREF99\" | \"WGS84\";\n\nconst EARTH_RADIUS = 6378137;\n\n////////////EXPORTED HELPER FUNCTIONS\n//Check Map.helpers for usage.\n\nexport type convertFromArrayOfArrayType = (fromProj: Projection, toProj: Projection, points: [number, number][]) => [number, number][];\nexport const convertFromArrayOfArray: convertFromArrayOfArrayType = (fromProj, toProj, points) => {\n    return points.map(point => proj4(fromProj, toProj, point));\n};\n\nexport type arrayToLatLngObjectType = (coords: [number, number][], invert: boolean) => LatLngLiteral[];\nexport const arrayToLatLngObject: arrayToLatLngObjectType = (arr, invert = false) => {\n    if (invert) {\n        return arr.map((point) => {\n            return { lat: point[1], lng: point[0] };\n        });\n    }\n    return arr.map((point) => {\n        return { lat: point[0], lng: point[1] };\n    });\n};\n\nexport type latLngArrayToCoordArrayType = (latLngArray: LatLngLiteral[], invert: boolean) => [number, number][];\nexport const latLngArrayToCoordArray: latLngArrayToCoordArrayType = (arr, invert) => {\n    if (invert) {\n        return arr.map((point) => {\n            return [point.lng, point.lat] as [number, number];\n        });\n    }\n    return arr.map((point) => {\n        return [point.lat, point.lng] as [number, number];\n    });\n};\n\nexport type makePointsAroundCircleRT90Type = (p: number[], r: number, numberOfPoints: number) => [number, number][];\nexport const makePointsAroundCircleRT90: makePointsAroundCircleRT90Type = (point, r, numberOfPoints = 12) => {\n    //Returns numberOfPoints around circle at p with r radius.\n\n    let points = [];\n    let i;\n\n    for (i = 0; i < numberOfPoints; i += 1) {\n        points.push([\n            point[0] + r * Math.cos(2 * Math.PI * i / numberOfPoints),\n            point[1] + r * Math.sin(2 * Math.PI * i / numberOfPoints)\n        ] as [number, number]);\n    }\n\n    return points;\n};\n\nexport type makeRectRT90Type = (p1: number[], p2: number[]) => [number, number][];\nexport const makeRectRT90: makeRectRT90Type = (p1, p2) => {\n    //p1 and p2 should be opposite corners of the rectangle.\n    let points = [];\n\n    points.push(\n        [p1[0], p1[1]],\n        [p2[0], p1[1]],\n        [p2[0], p2[1]],\n        [p1[0], p2[1]]\n    );\n\n    return points as [number, number][];\n};\n\nexport type movePointsByCoordType = (points_arr: [number, number][], coord: number[]) => [number, number][];\nexport const movePointsByCoord: movePointsByCoordType = (points_arr: [number, number][], coord: number[]) => {\n    //Adds value of Coord to all points in array.\n    return points_arr.map((point) => {\n        return [point[0] + coord[0], point[1] + coord[1]] as [number, number];\n    });\n};\n\n\nfunction squared(x: number): number { return x * x; }\nfunction toRad(x: number): number { return x * Math.PI / 180; }\nexport type haversineDistanceType = (a: LatLngLiteral, b: LatLngLiteral) => number;\nexport const haversineDistance: haversineDistanceType = (a, b) => {\n    const aLat = a.lat;\n    const bLat = b.lat;\n    const aLng = a.lng;\n    const bLng = b.lng;\n    const dLat = toRad(bLat - aLat);\n    const dLon = toRad(bLng - aLng);\n\n    const f = squared(Math.sin(dLat / 2.0)) + Math.cos(toRad(aLat)) * Math.cos(toRad(bLat)) * squared(Math.sin(dLon / 2.0));\n    const c = 2 * Math.atan2(Math.sqrt(f), Math.sqrt(1 - f));\n\n    return EARTH_RADIUS * c;\n};\n\nexport type MVCArrayToObjArrayType = (MVCArr: google.maps.MVCArray<google.maps.LatLng>) => LatLngLiteral[];\nexport const MVCArrayToObjArray: MVCArrayToObjArrayType = (MVCArr) => {\n    return MVCArr.getArray().map((gmapsLatLng) => {\n        return {\n            lat: gmapsLatLng.lat(),\n            lng: gmapsLatLng.lng()\n        };\n    });\n};\n\nexport type MVCArrayToCoordArrayType = (MVCArr: google.maps.MVCArray<google.maps.LatLng>) => number[][];\nexport const MVCArrayToCoordArray: MVCArrayToCoordArrayType = (MVCArr) => {\n    return MVCArr.getArray().map((gmapsLatLng) => {\n        return [gmapsLatLng.lat(), gmapsLatLng.lng()];\n    });\n};\n"]}