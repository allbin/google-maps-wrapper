import WrappedMapBase, { AnyObjectOptionsSet, WrappedGmapObj, AllMapObjEvents, LatLng, LatLngLiteral, MapObjectType, PolylineOptionsSet, WrappedPolyline, MarkerOptionsSet, WrappedMarker, PolygonOptionsSet, WrappedPolygon, WrappedFeature, LatLngBoundsLiteral } from './';
export declare function fromLatLngToPixel(map_ref: WrappedMapBase, latLng: LatLng): any;
export declare function fitToBoundsOfArray(map_ref: WrappedMapBase, arr_of_coords: [number, number][]): Promise<{}>;
export declare function fitToBoundsLiteral(map_ref: WrappedMapBase, bounds: LatLngBoundsLiteral): Promise<{}>;
export declare function fitToBoundsOfObjectArray(map_ref: WrappedMapBase, arr_of_latlngliteral: LatLngLiteral[]): Promise<{}>;
export declare function setPolyline(map_ref: WrappedMapBase, id: string | number, options: PolylineOptionsSet): Promise<WrappedPolyline>;
export declare function setPolygon(map_ref: WrappedMapBase, id: string | number, options: PolygonOptionsSet): Promise<WrappedPolygon>;
export declare function setMarker(map_ref: WrappedMapBase, id: string | number, options: MarkerOptionsSet): Promise<WrappedMarker>;
declare type setMapObject = (map_ref: WrappedMapBase, type: MapObjectType, id: string | number, options: AnyObjectOptionsSet, current_options_id?: string) => Promise<WrappedPolyline | WrappedPolygon | WrappedMarker>;
export declare const setMapObject: setMapObject;
export declare function unsetMapObject(map_ref: WrappedMapBase, type: MapObjectType, id: string | number): Promise<boolean>;
export declare function mapObjectEventCB(map_ref: WrappedMapBase, map_obj: WrappedGmapObj, event_type: AllMapObjEvents, e: any): boolean;
export declare function panZoomToObjectOrFeature(map_ref: WrappedMapBase, obj: WrappedMarker | WrappedPolygon | WrappedPolyline | WrappedFeature, zoom?: boolean): void;
export {};
