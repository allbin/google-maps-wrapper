{"version":3,"sources":["../src/module/feature_helpers.ts"],"names":[],"mappings":";AACA,OAAO,EAEL,qBAAqB,EACrB,kBAAkB,EAClB,4BAA4B,EAC5B,kBAAkB,EACnB,MAAM,GAAG,CAAC;AACX,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAW9C,eAAO,MAAM,gBAAgB,gBACd,UAAU,SAChB,MAAM,CAAC,IAAI,CAAC,IAAI,KACtB,IAaF,CAAC;AAoFF,eAAO,MAAM,iBAAiB,QACvB,MAAM,CAAC,IAAI,CAAC,GAAG,eACP,UAAU,kBACP,MAAM,CAAC,IAAI,CAAC,IAAI,WACvB,kBAAkB,WAClB,qBAAqB,2CAE7B,OAAO,CAAC,kBAAkB,CA2BzB,CAAC;AAEL,eAAO,MAAM,oBAAoB,QAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,eACP,UAAU,cACX,4BAA4B,WAC/B,qBAAqB,KAC7B,OAAO,CAAC;IACT,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB,QAAQ,EAAE,kBAAkB,EAAE,CAAC;CAChC,CAyBG,CAAC","file":"feature_helpers.d.ts","sourcesContent":["import { panZoomToObjectOrFeature } from \"./internal_helpers\";\nimport {\n  GMW_FeatureEvents,\n  GMW_FeatureOptionsSet,\n  GMW_WrappedFeature,\n  GMW_GeoJSONFeatureCollection,\n  GMW_GeoJSONFeature,\n} from \".\";\nimport { MapObjects } from \"./WrappedMapBase\";\n\nconst feature_events: GMW_FeatureEvents[] = [\n  \"click\",\n  \"mouseover\",\n  \"mouseout\",\n  \"mousedown\",\n  \"mouseup\",\n  \"rightclick\",\n];\n\nexport const setupLayerEvents = (\n  map_objects: MapObjects,\n  layer: google.maps.Data\n): void => {\n  feature_events.forEach((event_type) => {\n    layer.addListener(\n      event_type,\n      (data_mouse_event: google.maps.Data.MouseEvent) => {\n        const feature_id = data_mouse_event.feature.getId();\n        const wrapped_feature = map_objects.features[feature_id];\n        if (wrapped_feature && wrapped_feature._cbs[event_type]) {\n          wrapped_feature._cbs[event_type](data_mouse_event);\n        }\n      }\n    );\n  });\n};\n\nconst wrapGmapsFeature = (\n  map: google.maps.Map,\n  map_objects: MapObjects,\n  layer: google.maps.Data,\n  gmaps_feature: google.maps.Data.Feature,\n  options: GMW_FeatureOptionsSet\n): GMW_WrappedFeature => {\n  interface WrappedFeatureShell extends Partial<GMW_WrappedFeature> {\n    gmaps_feature: google.maps.Data.Feature;\n    options: GMW_FeatureOptionsSet;\n    selected_options_id: string;\n    _visible: boolean;\n    _cbs: { [key: string]: (e: google.maps.Data.MouseEvent) => void };\n    _bbox: google.maps.LatLngBounds;\n  }\n\n  const wrapped_feature: WrappedFeatureShell = {\n    gmaps_feature: gmaps_feature,\n    options: options,\n    selected_options_id: \"default\",\n    _visible:\n      options.default.visible !== undefined ? options.default.visible : true,\n    _cbs: {},\n    _bbox: new window.google.maps.LatLngBounds(),\n  };\n  gmaps_feature.getGeometry().forEachLatLng((point) => {\n    wrapped_feature._bbox.extend(point);\n  });\n  wrapped_feature.setOptions = (new_options: GMW_FeatureOptionsSet) => {\n    wrapped_feature.options = new_options;\n    return Promise.resolve(wrapped_feature as GMW_WrappedFeature);\n  };\n  wrapped_feature.applyOptions = (options_id: string) => {\n    if (!Object.prototype.hasOwnProperty.call(options, options_id)) {\n      throw new Error(\n        \"Tried to applyOptions(options_id) with '\" +\n          options_id +\n          \"', but options for given id are not defined.\"\n      );\n    }\n    wrapped_feature.selected_options_id = options_id;\n    const new_options = Object.assign(\n      {},\n      options.default,\n      options[wrapped_feature.selected_options_id],\n      { visible: wrapped_feature._visible }\n    );\n    layer.overrideStyle(gmaps_feature, new_options);\n  };\n  wrapped_feature.show = () => {\n    if (!wrapped_feature._visible && wrapped_feature.applyOptions) {\n      wrapped_feature._visible = true;\n      wrapped_feature.applyOptions(wrapped_feature.selected_options_id);\n    }\n  };\n  wrapped_feature.hide = () => {\n    if (wrapped_feature._visible && wrapped_feature.applyOptions) {\n      wrapped_feature._visible = false;\n      wrapped_feature.applyOptions(wrapped_feature.selected_options_id);\n    }\n  };\n  wrapped_feature.remove = () => {\n    layer.remove(gmaps_feature);\n  };\n  wrapped_feature.registerEventCB = (event_type, cb) => {\n    wrapped_feature._cbs[event_type] = cb;\n  };\n  wrapped_feature.unregisterEventCB = (event_type) => {\n    delete wrapped_feature._cbs[event_type];\n  };\n  wrapped_feature.zoomTo = () => {\n    panZoomToObjectOrFeature(map, wrapped_feature as GMW_WrappedFeature, true);\n  };\n  wrapped_feature.panTo = () => {\n    panZoomToObjectOrFeature(map, wrapped_feature as GMW_WrappedFeature, false);\n  };\n\n  wrapped_feature.applyOptions(\"default\");\n\n  return (wrapped_feature as unknown) as GMW_WrappedFeature;\n};\n\nexport const setGeoJSONFeature = (\n  map: google.maps.Map,\n  map_objects: MapObjects,\n  features_layer: google.maps.Data,\n  feature: GMW_GeoJSONFeature,\n  options: GMW_FeatureOptionsSet,\n  layer?: google.maps.Data\n): Promise<GMW_WrappedFeature> =>\n  new Promise((resolve, reject) => {\n    if (\n      Object.prototype.hasOwnProperty.call(map_objects.features, feature.id)\n    ) {\n      const wrapped_feature = map_objects.features[feature.id];\n      wrapped_feature.remove();\n    }\n\n    if (!layer) {\n      if (!features_layer) {\n        return reject(\n          \"Internal error in map wrapper: Features layer not created.\"\n        );\n      }\n    }\n    const feature_layer = features_layer;\n    const gmaps_feature = feature_layer.addGeoJson(feature)[0];\n    const wrapped_feature = wrapGmapsFeature(\n      map,\n      map_objects,\n      feature_layer,\n      gmaps_feature,\n      options\n    );\n    map_objects.features[feature.id] = wrapped_feature;\n    resolve(wrapped_feature);\n  });\n\nexport const setGeoJSONCollection = (\n  map: google.maps.Map,\n  map_objects: MapObjects,\n  collection: GMW_GeoJSONFeatureCollection,\n  options: GMW_FeatureOptionsSet\n): Promise<{\n  layer: google.maps.Data;\n  features: GMW_WrappedFeature[];\n}> =>\n  new Promise((resolve) => {\n    const layer = new window.google.maps.Data() as google.maps.Data;\n    layer.setMap(map);\n    setupLayerEvents(map_objects, layer);\n\n    const features: GMW_WrappedFeature[] = layer\n      .addGeoJson(collection)\n      .map((gmaps_feature) => {\n        const wrapped_feature = wrapGmapsFeature(\n          map,\n          map_objects,\n          layer,\n          gmaps_feature,\n          options\n        );\n        map_objects.features[gmaps_feature.getId()] = wrapped_feature;\n        return wrapped_feature;\n      });\n\n    layer.setStyle(options.default);\n    resolve({\n      layer: layer,\n      features: features,\n    });\n  });\n"]}