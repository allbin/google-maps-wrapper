{"version":3,"sources":["../src/module/WrappedMapBase.tsx"],"names":[],"mappings":"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","file":"WrappedMapBase.d.ts","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport MarkerClusterer, {\n  MarkerClustererOptions,\n  ClusterIconStyle,\n} from \"@google/markerclustererplus\";\nimport ScriptCache from \"./ScriptCache\";\nimport * as feature_helpers from \"./feature_helpers\";\nimport * as map_funcs from \"./map_functions\";\nimport {\n  panZoomToObjectOrFeature,\n  setMarker,\n  setPolygon,\n  setPolyline,\n  unsetMapObject,\n} from \"./internal_helpers\";\nimport {\n  GMW_LatLngBoundsLiteral,\n  GMW_LatLngLiteral,\n  GMW_LatLng,\n  GMW_PolylineOptionsSet,\n  GMW_PolygonOptionsSet,\n  GMW_MarkerOptionsSet,\n  GMW_PolylineOptions,\n  GMW_PolygonOptions,\n  GMW_WrappedPolyline,\n  GMW_WrappedPolygon,\n  GMW_WrappedMarker,\n  GMW_FeatureOptionsSet,\n  GMW_WrappedFeature,\n  GMW_DrawingCB,\n  GMW_Services,\n  GMW_LatLngBounds,\n  GMW_GeoJSONFeatureCollection,\n  GMW_GeoJSONFeature,\n} from \".\";\n\n// type AnyObjectOptions =\n//   | GMW_MarkerOptions\n//   | GMW_PolylineOptions\n//   | GMW_PolygonOptions;\n\nexport interface MapObjects {\n  marker: {\n    [id: string]: GMW_WrappedMarker;\n    [id: number]: GMW_WrappedMarker;\n  };\n  polygon: {\n    [id: string]: GMW_WrappedPolygon;\n    [id: number]: GMW_WrappedPolygon;\n  };\n  polyline: {\n    [id: string]: GMW_WrappedPolyline;\n    [id: number]: GMW_WrappedPolyline;\n  };\n  features: {\n    [id: string]: GMW_WrappedFeature;\n    [id: number]: GMW_WrappedFeature;\n  };\n}\n\nexport interface CuttingState {\n  enabled: boolean;\n  id: string | number | null;\n  indexes: number[] | null;\n  arr?: [number, number][];\n}\nexport interface CuttingObjects {\n  [key: string]: any;\n  hover_scissors?: any;\n}\n\nexport type ExportedFunctions = {\n  getBoundsLiteral: () => GMW_LatLngBoundsLiteral | undefined;\n  getBounds: () => GMW_LatLngBounds | undefined;\n  setCenter: (lat_lng: GMW_LatLngLiteral | GMW_LatLng) => Promise<void>;\n  setBounds: (\n    lat_lng_bounds: GMW_LatLngBoundsLiteral | GMW_LatLngBounds\n  ) => Promise<void>;\n  toPixel: (lat_lng_pixel: GMW_LatLng | GMW_LatLngLiteral) => [number, number];\n  setZoom: (zoom_level: number) => Promise<void>;\n  setPolyline: (\n    id: string | number,\n    options: GMW_PolylineOptionsSet\n  ) => Promise<GMW_WrappedPolyline>;\n  setPolygon: (\n    id: string | number,\n    options: GMW_PolygonOptionsSet\n  ) => Promise<GMW_WrappedPolygon>;\n  unsetPolyline: (id: string | number) => Promise<boolean>;\n  unsetPolygon: (id: string | number) => Promise<boolean>;\n  unsetMarker: (id: string | number) => Promise<boolean>;\n  clearPolylines: () => Promise<boolean[]>;\n  clearPolygons: () => Promise<boolean[]>;\n  clearFeatureCollections: (\n    map_objects: MapObjects,\n    feature_layer: google.maps.Data,\n    feature_layers: google.maps.Data[]\n  ) => void;\n  setMarker: (\n    id: string | number,\n    options: GMW_MarkerOptionsSet\n  ) => Promise<GMW_WrappedMarker>;\n  clearMarkers: () => Promise<boolean[]>;\n  setGeoJSONCollection: (\n    collection: GMW_GeoJSONFeatureCollection,\n    options: GMW_FeatureOptionsSet\n  ) => Promise<{\n    layer: google.maps.Data;\n    features: GMW_WrappedFeature[];\n  }>;\n  setGeoJSONFeature: (\n    feature: GMW_GeoJSONFeature,\n    options: GMW_FeatureOptionsSet\n  ) => Promise<GMW_WrappedFeature>;\n  zoomToObject: (\n    item:\n      | GMW_WrappedMarker\n      | GMW_WrappedPolygon\n      | GMW_WrappedPolyline\n      | GMW_WrappedFeature\n  ) => void;\n  panToObject: (\n    item:\n      | GMW_WrappedMarker\n      | GMW_WrappedPolygon\n      | GMW_WrappedPolyline\n      | GMW_WrappedFeature\n  ) => void;\n  setDrawingMode: (\n    type: \"polyline\" | \"polygon\",\n    opts: GMW_PolylineOptions | GMW_PolygonOptions,\n    cb: GMW_DrawingCB\n  ) => void;\n  cancelDrawingMode: (cancel_drawing: boolean, debug_src?: string) => void;\n  setCuttingMode: (polyline_id: string | number, cb?: () => any) => void;\n  cuttingPositionUpdate: (mouse_event: google.maps.MouseEvent) => void;\n  cuttingClick: (mouse_event: google.maps.MouseEvent) => void;\n  completeCuttingMode: () => [number, number][][];\n  cancelCuttingMode: () => void;\n  registerDragStartCB: (cb: () => void) => number;\n  unregisterDragStartCB: (cb: () => void) => void;\n  registerDragEndCB: (cb: () => void) => number;\n  unregisterDragEndCB: (cb: () => void) => void;\n  getClusterers: () => Promise<MarkerClusterer[]>;\n  setClusterer: (\n    clusterer_options: MarkerClustererOptions\n  ) => Promise<MarkerClusterer>;\n  unsetClusterer: (clusterer: MarkerClusterer) => void;\n  createClustererStyle: typeof MarkerClusterer.withDefaultStyle;\n  /** Ensure to only use after map initialization. */\n  getServices: () => GMW_Services;\n};\n\ninterface EventCallbacks {\n  onCenterChanged?: () => void;\n  onBoundsChanged?: () => void;\n  onClick?: (e: google.maps.MouseEvent) => void;\n  onDoubleClick?: (e: google.maps.MouseEvent) => void;\n  onDrag?: () => void;\n  onDragEnd?: () => void;\n  onDragStart?: () => void;\n  onHeadingChanged?: () => void;\n  onIdle?: () => void;\n  onMapTypeIdChanged?: () => void;\n  onMouseMove?: (e: google.maps.MouseEvent) => void;\n  onMouseOut?: (e: google.maps.MouseEvent) => void;\n  onMouseOver?: (e: google.maps.MouseEvent) => void;\n  onProjectionChanged?: () => void;\n  onResize?: () => void;\n  onRightClick?: (e: google.maps.MouseEvent) => void;\n  onTilesLoaded?: () => void;\n  onTiltChanged?: () => void;\n  onZoomChanged?: () => void;\n}\ntype CallbackName = keyof EventCallbacks;\n\nexport interface MapBaseProps extends EventCallbacks {\n  initializedCB?: (map: google.maps.Map, funcs: ExportedFunctions) => void;\n  googleapi_maps_uri: string;\n  id?: string;\n  default_center: GMW_LatLngLiteral;\n  default_zoom: number;\n  default_options?: object;\n  styles?: object;\n  verbose?: true;\n}\n\nconst basic_event_names = [\n  \"center_changed\",\n  \"heading_changed\",\n  \"maptypeid_changed\",\n  \"projection_changed\",\n  \"resize\",\n  \"tilesloaded\",\n  \"tilt_changed\",\n  \"zoom_changed\",\n  \"mouseout\",\n  \"mouseover\",\n];\n\nconst event_name_to_callback_name: {\n  [key: string]: CallbackName;\n} = {\n  center_changed: \"onCenterChanged\",\n  heading_changed: \"onHeadingChanged\",\n  maptypeid_changed: \"onMapTypeIdChanged\",\n  projection_changed: \"onProjectionChanged\",\n  resize: \"onResize\",\n  tilesloaded: \"onTilesLoaded\",\n  tilt_changed: \"onTiltChanged\",\n  zoom_changed: \"onZoomChanged\",\n  mouseout: \"onMouseOut\",\n  mousemove: \"onMouseMove\",\n  mouseover: \"onMouseOver\",\n  rightclick: \"onRightClick\",\n  idle: \"onIdle\",\n  drag: \"onDrag\",\n  dragstart: \"onDragStart\",\n  dragend: \"onDragEnd\",\n  click: \"onClick\",\n};\n\nconst onMapEvent = (\n  event_callbacks: EventCallbacks,\n  event_name: CallbackName,\n  e?: any\n): void => {\n  const cb = event_callbacks[event_name];\n  cb && cb(e);\n};\n\nexport const WrappedMapBase: React.FunctionComponent<MapBaseProps> = (\n  props\n) => {\n  const {\n    googleapi_maps_uri,\n    default_center,\n    default_options,\n    default_zoom,\n    onDoubleClick,\n    onBoundsChanged,\n    onCenterChanged,\n    onClick,\n    onDrag,\n    onDragEnd,\n    onDragStart,\n    onHeadingChanged,\n    onIdle,\n    onMapTypeIdChanged,\n    onMouseMove,\n    onMouseOut,\n    onMouseOver,\n    onProjectionChanged,\n    onResize,\n    onRightClick,\n    onTilesLoaded,\n    onTiltChanged,\n    onZoomChanged,\n    styles,\n    initializedCB,\n  } = props;\n\n  const [script_cache] = useState<any>(\n    ScriptCache({\n      google: googleapi_maps_uri,\n    })\n  );\n\n  const verbose = props.verbose || false;\n\n  const [clusterers] = useState<MarkerClusterer[]>([]);\n  const [map, setMap] = useState<google.maps.Map>();\n  const [do_after_init] = useState<((map: google.maps.Map) => void)[]>([]);\n  const [do_on_drag_end] = useState<(() => void)[]>([]);\n  const [do_on_drag_start] = useState<(() => void)[]>([]);\n  const [drawing_completed_listener, setDrawingCompletedListener] = useState<\n    google.maps.MapsEventListener\n  >();\n  const [features_layer, setFeaturesLayer] = useState<google.maps.Data>();\n  const [feature_layers] = useState<google.maps.Data[]>();\n  const [map_objects] = useState<MapObjects>({\n    marker: {},\n    polygon: {},\n    polyline: {},\n    features: {},\n  });\n  const [cutting_objects] = useState<CuttingObjects>({});\n  const [overlay, setOverlay] = useState<google.maps.OverlayView>();\n\n  const [cutting] = useState<CuttingState>({\n    enabled: false,\n    id: null,\n    indexes: null,\n  });\n  const [cutting_completed_listener] = useState<\n    (segments: [number, number][][] | null) => void\n  >();\n  const [cancel_drawing] = useState<boolean>(false);\n  const [services, setServices] = useState<GMW_Services>();\n  const html_element_ref = useRef(null);\n  const [funcs, setFuncs] = useState<ExportedFunctions>();\n  const [event_callbacks] = useState<EventCallbacks>({});\n\n  const ic = <T extends any>(\n    fn: (map: google.maps.Map) => Promise<T>\n  ): Promise<T> =>\n    new Promise((resolve, reject) => {\n      if (!map) {\n        do_after_init.push((map) => {\n          fn(map).then(resolve).catch(reject);\n        });\n      } else {\n        fn(map).then(resolve);\n      }\n    });\n\n  useEffect(() => {\n    if (!html_element_ref.current) {\n      throw new Error(\"html element not found.\");\n    }\n\n    script_cache.google.onLoad(() => {\n      const center = default_center;\n      if (!center) {\n        throw new Error(\n          \"Could not create map: Requires 'default_center' prop.\"\n        );\n      }\n      const zoom = typeof default_zoom !== \"undefined\" ? default_zoom : null;\n      if (!zoom) {\n        throw new Error(\"Could not create map: Requires 'default_zoom' prop.\");\n      }\n      if (!googleapi_maps_uri) {\n        throw new Error(\n          \"Could not create map: Requires 'googleapi_maps_uri' prop. Ex: https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,places,drawing&key=XXXXXXXXXX\"\n        );\n      }\n      const defaults = default_options || {};\n      const mapConfig = Object.assign({}, defaults, {\n        center: new window.google.maps.LatLng(center.lat, center.lng),\n        zoom: zoom,\n        gestureHandling: \"greedy\",\n        styles: styles || {},\n      });\n      const maps = window.google.maps;\n      const initial_map = new maps.Map(html_element_ref.current, mapConfig);\n      setMap(initial_map);\n    });\n    return () => {\n      if (map) {\n        window.google.maps.event.clearInstanceListeners(map);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!map) {\n      return;\n    }\n    const initial_services: GMW_Services = {\n      geocoderService: new window.google.maps.Geocoder(),\n      directionsService: new window.google.maps.DirectionsService(),\n      places:\n        window.google.maps.places &&\n        new window.google.maps.places.PlacesService(map),\n    };\n    if (window.google.maps.drawing) {\n      initial_services.drawing = window.google.maps.drawing;\n      initial_services.drawingManager = new window.google.maps.drawing.DrawingManager(\n        {\n          drawingMode: null,\n          drawingControl: false,\n          drawingControlOptions: {\n            drawingModes: [],\n          },\n        }\n      );\n      initial_services.drawingManager.setMap(map);\n    }\n\n    setServices(initial_services);\n  }, [map]);\n  useEffect(() => {\n    if (!map || !services) {\n      return;\n    }\n    setFuncs({\n      getBoundsLiteral: () => map_funcs.getBoundsLiteral(map),\n      getBounds: () => map_funcs.getBounds(map),\n      setCenter: (lat_lng) =>\n        ic<void>((map) => map_funcs.setCenter(map, lat_lng)),\n      setBounds: (lat_lng) =>\n        ic<void>((map) => map_funcs.setBounds(map, lat_lng)),\n      toPixel: (lat_lng_pixel) =>\n        map_funcs.toPixel(lat_lng_pixel, html_element_ref, overlay),\n      setZoom: (zoom_level) => ic((map) => map_funcs.setZoom(zoom_level, map)),\n      setPolyline: (id, options) =>\n        ic((map) =>\n          setPolyline(verbose, map, map_objects, cutting, id, options)\n        ),\n      setPolygon: (id, options) =>\n        ic((map: google.maps.Map) =>\n          setPolygon(verbose, map, map_objects, cutting, id, options)\n        ),\n      unsetPolyline: (id) =>\n        unsetMapObject(verbose, map_objects, cutting, \"polyline\", id),\n      unsetPolygon: (id) =>\n        unsetMapObject(verbose, map_objects, cutting, \"polygon\", id),\n      clearPolylines: () =>\n        map_funcs.clearPolylines(verbose, map_objects, cutting),\n      clearPolygons: () =>\n        map_funcs.clearPolygons(verbose, map_objects, cutting),\n      setMarker: (id, options) =>\n        ic((map) => setMarker(verbose, map, map_objects, cutting, id, options)),\n      unsetMarker: (id) =>\n        unsetMapObject(verbose, map_objects, cutting, \"marker\", id),\n      clearMarkers: () => map_funcs.clearMarkers(verbose, map_objects, cutting),\n      setGeoJSONCollection: (collection, options) =>\n        ic((map) =>\n          feature_helpers.setGeoJSONCollection(\n            map,\n            map_objects,\n            collection,\n            options\n          )\n        ),\n      setGeoJSONFeature: (feature, options) =>\n        ic((map) => {\n          if (!features_layer) {\n            throw new Error(\"features layer not loaded.\");\n          }\n          return feature_helpers.setGeoJSONFeature(\n            map,\n            map_objects,\n            features_layer,\n            feature,\n            options\n          );\n        }),\n      clearFeatureCollections: () => {\n        if (!features_layer || !feature_layers) {\n          throw new Error(\"features/feature layer/layers not loaded.\");\n        }\n        map_funcs.clearFeatureCollections(\n          map_objects,\n          features_layer,\n          feature_layers\n        );\n      },\n      zoomToObject: (item) => map && panZoomToObjectOrFeature(map, item, true),\n      panToObject: (item) => map && panZoomToObjectOrFeature(map, item, false),\n      setDrawingMode: (type, opts, cb) => {\n        map_funcs.setDrawingMode(\n          services,\n          type,\n          opts,\n          cb,\n          cancel_drawing,\n          setDrawingCompletedListener,\n          drawing_completed_listener\n        );\n      },\n      cancelDrawingMode: (cancel_drawing, debug_src) =>\n        drawing_completed_listener &&\n        map_funcs.cancelDrawingMode(\n          services,\n          cancel_drawing,\n          drawing_completed_listener,\n          debug_src\n        ),\n      setCuttingMode: (polyline_id, cb) =>\n        drawing_completed_listener &&\n        cutting_completed_listener &&\n        map_funcs.setCuttingMode(\n          services,\n          map,\n          map_objects,\n          cutting,\n          cutting_objects,\n          default_center,\n          cancel_drawing,\n          drawing_completed_listener,\n          polyline_id,\n          cutting_completed_listener,\n          cb\n        ),\n      cuttingPositionUpdate: (mouse_event) =>\n        map_funcs.cuttingPositionUpdate(\n          mouse_event,\n          map_objects,\n          cutting,\n          cutting_objects\n        ),\n      cuttingClick: (mouse_event) =>\n        map_funcs.cuttingClick(\n          mouse_event,\n          map,\n          map_objects,\n          cutting,\n          cutting_objects\n        ),\n      completeCuttingMode: () =>\n        (cutting_completed_listener &&\n          map_funcs.completeCuttingMode(\n            map_objects,\n            cutting,\n            cutting_objects,\n            cutting_completed_listener\n          )) ||\n        [],\n      cancelCuttingMode: () =>\n        map_funcs.cancelCuttingMode(map_objects, cutting, cutting_objects),\n      registerDragStartCB: (cb) => do_on_drag_end.push(cb),\n      unregisterDragStartCB: (cb) => {\n        const index = do_on_drag_start.indexOf(cb);\n        if (index > -1) {\n          do_on_drag_start.splice(index, 1);\n        }\n      },\n      registerDragEndCB: (cb) => do_on_drag_end.push(cb),\n      unregisterDragEndCB: (cb) => {\n        const index = do_on_drag_end.indexOf(cb);\n        if (index > -1) {\n          do_on_drag_end.splice(index, 1);\n        }\n      },\n      /** *Never use the MarkerClusterer.clearMarkers() function, use the maps unsetClusterer instead!*\n       *  NOTE: This will make marker.show() and marker.hide() not function properly, since visibility is controlled by the cluster.\n       */\n      setClusterer: (clusterer_options) =>\n        ic((map) => {\n          const clusterer = new MarkerClusterer(map, [], clusterer_options);\n          clusterers.push(clusterer);\n          return Promise.resolve(clusterer);\n        }),\n      /** *Never use the MarkerClusterer.clearMarkers() function, use the maps unsetClusterer instead!*\n       *  NOTE: This will make marker.show() and marker.hide() not function properly, since visibility is controlled by the cluster.\n       */\n      getClusterers: () => ic(() => Promise.resolve([...clusterers])),\n      unsetClusterer: (clusterer) => {\n        clusterer.removeMarkers(clusterer.getMarkers());\n        const index = clusterers.indexOf(clusterer);\n        if (index > -1) {\n          clusterers.splice(index, 1);\n        }\n      },\n      createClustererStyle: (styling: ClusterIconStyle) =>\n        MarkerClusterer.withDefaultStyle(styling),\n      getServices: () => {\n        return services;\n      },\n    });\n\n    //\n    //\n    //\n    const initial_features_layer = new window.google.maps.Data();\n    setFeaturesLayer(initial_features_layer);\n    initial_features_layer.setMap(map);\n    feature_helpers.setupLayerEvents(map_objects, initial_features_layer);\n    //eslint-disable-next-line\n    function CanvasProjectionOverlay() {}\n    CanvasProjectionOverlay.prototype = new window.google.maps.OverlayView();\n    CanvasProjectionOverlay.prototype.constructor = CanvasProjectionOverlay;\n    CanvasProjectionOverlay.prototype.onAdd = () => {\n      /***/\n    };\n    CanvasProjectionOverlay.prototype.draw = () => {\n      /***/\n    };\n    CanvasProjectionOverlay.prototype.onRemove = () => {\n      /***/\n    };\n    const initial_overlay = new (CanvasProjectionOverlay as any)(/***/);\n    setOverlay(initial_overlay);\n    if (initial_overlay) {\n      initial_overlay.setMap(map);\n    }\n  }, [services]);\n\n  useEffect(() => {\n    if (!funcs || !map || !features_layer || !services) {\n      return;\n    }\n    basic_event_names.forEach((event_name) => {\n      map.addListener(event_name, (e) =>\n        onMapEvent(event_callbacks, event_name_to_callback_name[event_name], e)\n      );\n    });\n\n    map.addListener(\"click\", (mouse_event) => {\n      if (!funcs) {\n        throw new Error(\"funcs is undefined\");\n      }\n      cutting.enabled && funcs.cuttingClick(mouse_event);\n      !cutting.enabled && onMapEvent(event_callbacks, \"onClick\", mouse_event);\n    });\n    map.addListener(\n      \"dblclick\",\n      (mouse_event) =>\n        !cutting.enabled &&\n        onMapEvent(event_callbacks, \"onDoubleClick\", mouse_event)\n    );\n    map.addListener(\n      \"drag\",\n      () => !cutting.enabled && onMapEvent(event_callbacks, \"onDrag\")\n    );\n    map.addListener(\n      \"dragend\",\n      () => !cutting.enabled && onMapEvent(event_callbacks, \"onDragEnd\")\n    );\n    map.addListener(\"dragstart\", () => {\n      do_on_drag_start.forEach((cb) => {\n        if (!cutting.enabled) {\n          cb();\n        }\n      });\n      !cutting.enabled && onMapEvent(event_callbacks, \"onDragStart\");\n    });\n\n    map.addListener(\"idle\", () => {\n      do_on_drag_end.forEach((cb) => {\n        if (!cutting.enabled) {\n          cb();\n        }\n      });\n      !cutting.enabled && onMapEvent(event_callbacks, \"onIdle\");\n    });\n    map.addListener(\"mousemove\", (mouse_event: google.maps.MouseEvent) => {\n      if (cutting.enabled) {\n        if (!funcs) {\n          throw new Error(\"funcs is undefined\");\n        }\n        funcs.cuttingPositionUpdate(mouse_event);\n      }\n      onMapEvent(event_callbacks, \"onMouseMove\", mouse_event);\n    });\n\n    map.addListener(\"rightclick\", (mouse_event: google.maps.MouseEvent) => {\n      !cutting.enabled &&\n        onMapEvent(event_callbacks, \"onRightClick\", mouse_event);\n    });\n\n    window.google.maps.event.addListenerOnce(map, \"idle\", () =>\n      doAfterInit(map)\n    );\n  }, [funcs, features_layer]);\n\n  useEffect(() => {\n    if (!funcs || !map || !features_layer || !services) {\n      return;\n    }\n    const cb_names: CallbackName[] = [\n      \"onDoubleClick\",\n      \"onBoundsChanged\",\n      \"onCenterChanged\",\n      \"onClick\",\n      \"onDrag\",\n      \"onDragEnd\",\n      \"onDragStart\",\n      \"onHeadingChanged\",\n      \"onIdle\",\n      \"onMapTypeIdChanged\",\n      \"onMouseMove\",\n      \"onMouseOut\",\n      \"onMouseOver\",\n      \"onProjectionChanged\",\n      \"onResize\",\n      \"onRightClick\",\n      \"onTilesLoaded\",\n      \"onTiltChanged\",\n      \"onZoomChanged\",\n    ];\n    cb_names.forEach((cb_name) => {\n      (event_callbacks[cb_name] as any) = props[cb_name] as any;\n    });\n  }, [\n    onDoubleClick,\n    onBoundsChanged,\n    onCenterChanged,\n    onClick,\n    onDrag,\n    onDragEnd,\n    onDragStart,\n    onHeadingChanged,\n    onIdle,\n    onMapTypeIdChanged,\n    onMouseMove,\n    onMouseOut,\n    onMouseOver,\n    onProjectionChanged,\n    onResize,\n    onRightClick,\n    onTilesLoaded,\n    onTiltChanged,\n    onZoomChanged,\n  ]);\n\n  const doAfterInit = (map: google.maps.Map): void => {\n    do_after_init.forEach((cb) => {\n      cb(map);\n    });\n\n    if (initializedCB) {\n      //Tell parent we are initialized if the parent has asked for it.\n      if (!funcs) {\n        throw new Error(\"funcs is undefined\");\n      }\n      initializedCB(map, funcs);\n    }\n  };\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      <div\n        ref={html_element_ref}\n        style={{\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\",\n          right: \"0\",\n          bottom: \"0\",\n        }}\n      />\n    </div>\n  );\n};\nexport default WrappedMapBase;\n"]}